{"name": "test_enterDataInEditBox", "status": "failed", "statusDetails": {"message": "AssertionError", "trace": "self = <AppiumFramwork.pages.LoginPage.LoginPageTest object at 0x000001E57F1170A0>, locatorValue = 'SUBMIT', locatorType = 'text'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.waitForElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:53: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramwork.pages.LoginPage.LoginPageTest object at 0x000001E57F1170A0>, locatorvalue = 'SUBMIT', locatorType = 'text'\n\n    def waitForElement(self, locatorvalue, locatorType):\n        locatorType = locatorType.lower()\n        element = None\n        wait = WebDriverWait(self.driver, 25, poll_frequency=1,\n                             ignored_exceptions=[ElementNotVisibleException, ElementNotSelectableException,\n                                                 NoSuchElementException])\n        if locatorType == \"id\":\n            element = wait.until(lambda x: x.find_element(AppiumBy.ID, locatorvalue))\n            return element\n        elif locatorType == \"class\":\n            element = wait.until(lambda x: x.find_element(AppiumBy.CLASS_NAME, locatorvalue))\n            return element\n        elif locatorType == \"des\":\n            element = wait.until(\n                lambda x: x.find_element(AppiumBy.ANDROID_UIAUTOMATOR,\n                                         'UiSelector().description(\"%s\")' % (locatorvalue)))\n            return element\n        elif locatorType == \"index\":\n            element = wait.until(\n                lambda x: x.find_element(AppiumBy.ANDROID_UIAUTOMATOR, \"UiSelector().index(%d)\" % int(locatorvalue)))\n            return element\n        elif locatorType == \"text\":\n>           element = wait.until(lambda x: x.find_element(AppiumBy.ANDROID_UIAUTOMATOR, 'text(\"%s\")' % locatorvalue))\n\n..\\base\\BasePage.py:39: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"436da1bd-5f54-4847-b096-44643ec023dd\")>\nmethod = <function BasePage.waitForElement.<locals>.<lambda> at 0x000001E57F1031F0>, message = ''\n\n    def until(self, method, message=''):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except InvalidSelectorException as e:\n                raise e\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, 'screen', None)\n                stacktrace = getattr(exc, 'stacktrace', None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       NoSuchElementError: An element could not be located on the page using the given search parameters.\nE           at AndroidUiautomator2Driver.findElOrEls (C:\\Program Files\\Appium Server GUI\\resources\\app\\node_modules\\appium\\node_modules\\appium-android-driver\\lib\\commands\\find.js:75:11)\nE           at processTicksAndRejections (internal/process/task_queues.js:85:5)\n\n..\\..\\..\\..\\AppData\\Roaming\\Python\\Python39\\site-packages\\selenium\\webdriver\\support\\wait.py:89: TimeoutException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramwork.pages.LoginPage.LoginPageTest object at 0x000001E57F1170A0>, locatorValue = 'SUBMIT', locatorType = 'text'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n>           element = self.getElement(locatorValue, locatorType)\n\n..\\base\\BasePage.py:66: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramwork.pages.LoginPage.LoginPageTest object at 0x000001E57F1170A0>, locatorValue = 'SUBMIT', locatorType = 'text'\n\n    def getElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.waitForElement(locatorValue, locatorType)\n            self.log.info(\"Element found with LocatorType: \" + locatorType + \" with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Element not found with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:59: AssertionError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <AppiumFramwork.tests.LoginTest.LoginTest testMethod=test_enterDataInEditBox>\n\n    @pytest.mark.run(order=5)\n    def test_enterDataInEditBox(self):\n        self.gt.enterText()\n>       self.gt.clickOnSubmit()\n\nLoginTest.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n..\\pages\\LoginPage.py:52: in clickOnSubmit\n    self.clickElement(self._submitButton,\"text\")\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <AppiumFramwork.pages.LoginPage.LoginPageTest object at 0x000001E57F1170A0>, locatorValue = 'SUBMIT', locatorType = 'text'\n\n    def clickElement(self, locatorValue, locatorType=\"id\"):\n        element = None\n        try:\n            locatorType = locatorType.lower()\n            element = self.getElement(locatorValue, locatorType)\n            element.click()\n            self.log.info(\n                \"Clicked on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n        except:\n            self.log.info(\n                \"Unable to click on Element with LocatorType: \" + locatorType + \" and with the locatorValue :\" + locatorValue)\n            self.takeScreenshot(locatorType)\n>           assert False\nE           AssertionError\n\n..\\base\\BasePage.py:74: AssertionError"}, "steps": [{"name": "Entered Text", "status": "passed", "start": 1653572282069, "stop": 1653572282069}], "attachments": [{"name": "id", "source": "80fef5ed-c6aa-4d40-b826-92d577b6e2d0-attachment.png", "type": "image/png"}, {"name": "id", "source": "0d75e5d0-ec38-45f6-8579-8f214b3673e5-attachment.png", "type": "image/png"}, {"name": "text", "source": "2ef72d0a-d52b-4ee0-83ae-349d4378318d-attachment.png", "type": "image/png"}, {"name": "text", "source": "ac8d9087-c741-4402-8793-7cb64fa98fd4-attachment.png", "type": "image/png"}, {"name": "log", "source": "b35999cc-9d20-4bc2-828f-5ad1e0b88fc3-attachment.txt", "type": "text/plain"}, {"name": "stdout", "source": "661f90fb-dc5b-4e28-8e19-c7bcc31b02cc-attachment.txt", "type": "text/plain"}], "start": 1653572269077, "stop": 1653572308955, "uuid": "7896cc9b-d5de-4d6e-8fef-a447149170df", "historyId": "755b55570d28e76a349c105292d50e06", "testCaseId": "4e33b420b39a22984afc3dd17fa35653", "fullName": "TestSuite.LoginTest#test_enterDataInEditBox", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('beforeClass', 'beforeMethod')"}, {"name": "tag", "value": "run(order=3)"}, {"name": "suite", "value": "TestSuite"}, {"name": "subSuite", "value": "LoginTest"}, {"name": "host", "value": "BTZVBK3"}, {"name": "thread", "value": "15080-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "TestSuite"}]}